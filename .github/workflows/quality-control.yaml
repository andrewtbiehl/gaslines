# The following workflow runs upon pushing new commits to any branches
# It runs and reports all code quality checks required to merge to main
name: Quality Control
permissions: {}
"on": push
jobs:
  # The following job is for any setup that can be outsourced from the other jobs
  setup:
    name: Setup
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    outputs:
      PYTHON_VERSION: ${{env.PYTHON_VERSION}}
      PYTHON_CACHE_KEY: ${{env.PYTHON_CACHE_KEY}}
      PYTHON_PATH: ${{env.PYTHON_PATH}}
    steps:
      - name: Checkout project
        uses: actions/checkout@v3.0.2
      - name: Determine project Python version
        run: |
          PYTHON_VERSION=$(
            jq --raw-output "._meta.requires.python_version" Pipfile.lock
          )
          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> ${GITHUB_ENV}
      - name: Install project Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Get project Python path
        run: |
          PYTHON_CACHE_KEY=python-packages-${{hashFiles('Pipfile.lock')}}
          echo "PYTHON_CACHE_KEY=${PYTHON_CACHE_KEY}" >> ${GITHUB_ENV}
          set -- \
            "import sys, pathlib;" \
            "print(pathlib.Path(sys.executable).parent.parent)"
          PYTHON_PATH=$(python -c "$*")
          echo "PYTHON_PATH=${PYTHON_PATH}" >> ${GITHUB_ENV}
      - name: Restore project Python cache
        id: restore-project-python-cache
        uses: actions/cache@v3.0.8
        with:
          key: ${{env.PYTHON_CACHE_KEY}}
          path: ${{env.PYTHON_PATH}}
      - name: Install project Python packages
        if: ${{!steps.restore-project-python-cache.outputs.cache-hit}}
        run: |
          pip list --outdated --format=freeze \
            | sed "s/==.*//" \
            | xargs pip install --upgrade
          pip install pipenv
          pipenv install --system --ignore-pipfile --deploy --dev
  # The following job is for all static code analyis
  # The checks vary from format enforcement to linting
  check:
    name: Check
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    needs: setup
    env:
      PYTHON_VERSION: ${{needs.setup.outputs.PYTHON_VERSION}}
      PYTHON_CACHE_KEY: ${{needs.setup.outputs.PYTHON_CACHE_KEY}}
      PYTHON_PATH: ${{needs.setup.outputs.PYTHON_PATH}}
    steps:
      # The following three steps are (unfortunately) required to set up the job
      - name: Checkout project
        uses: actions/checkout@v3.0.2
      - name: Install project Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Restore project Python cache
        uses: actions/cache@v3.0.8
        with:
          key: ${{env.PYTHON_CACHE_KEY}}
          path: ${{env.PYTHON_PATH}}
      # The following step is the central step to this job
      - name: Run checks
        run: invoke check
  # The following job is for all dynamic code analyis, also known as tests
  test:
    name: Test
    runs-on: ubuntu-20.04
    timeout-minutes: 3
    needs: setup
    env:
      PYTHON_VERSION: ${{needs.setup.outputs.PYTHON_VERSION}}
      PYTHON_CACHE_KEY: ${{needs.setup.outputs.PYTHON_CACHE_KEY}}
      PYTHON_PATH: ${{needs.setup.outputs.PYTHON_PATH}}
    steps:
      # The following three steps are (unfortunately) required to set up the job
      - name: Checkout project
        uses: actions/checkout@v3.0.2
      - name: Install project Python
        uses: actions/setup-python@v4.1.0
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Restore project Python cache
        uses: actions/cache@v3.0.8
        with:
          key: ${{env.PYTHON_CACHE_KEY}}
          path: ${{env.PYTHON_PATH}}
      # The following step is the central step to this job
      - name: Run tests
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          COVERALLS_SERVICE_NAME: github
        run: invoke test --coverage=upload
